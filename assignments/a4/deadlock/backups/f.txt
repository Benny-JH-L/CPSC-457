/// =========================================================================
/// Copyright (C) 2025 Pavol Federl (pfederl@ucalgary.ca)
/// All Rights Reserved. Do not distribute this file.
/// =========================================================================
/// this is the ONLY file you should edit and submit to D2L

#include "find_deadlock.h"
#include <string>
#include <unordered_map>
#include <vector>
#include <iostream>
#include <cmath>
#include <unordered_set>
#include <queue>
#include <stack>

using namespace std;

const char processID = '$';
const char resourceID = '#'; 

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// split(s) splits string s into vector of strings (words)
/// the delimiters are 1 or more whitespaces
static std::vector<std::string> split(const std::string & s)
{
    auto linec = s + " ";
    std::vector<std::string> res;
    bool in_str = false;
    std::string curr_word = "";
    for (auto c : linec) {
        if (isspace(c)) {
            if (in_str)
                res.push_back(curr_word);
            in_str = false;
            curr_word = "";
        } else {
            curr_word.push_back(c);
            in_str = true;
        }
    }
    return res;
}
// note i could make a small optimization on the above code by having a
// param as a vector, instead of returning one

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// Word2Int is a class that can convert words to unique integers
/// get(word) returns the same number given the same word
///           the numbers will start at 0, then 1, 2, ...
///
/// example:
///   Word2Int w2i;
///   w2i.get("hello") = 0
///   w2i.get("world") = 1
///   w2i.get("hello") = 0
///
/// Word2Int "may" help you get a bit more performance
/// in your cycle finding algorithm, as arrays are faster
/// than hash tables...
///

class Word2Int 
{
    int counter = 0;
    std::unordered_map<std::string, int> myset;
    std::unordered_map<int, string> reverse_myset;

public:
    int get(const std::string & w)
    {
        auto f = myset.find(w);
        if (f == myset.end()) {
            myset[w] = counter;
            reverse_myset[counter] = w;
            // return counter;
            return counter++;
        }
        reverse_myset[f->second] = f->first;
        return f->second;
    }

    // gets the string associated with the `int i`
    string reverse_get(const int& i)
    {
        return reverse_myset[i];
    }

    // string reverse_get(const int& i)
    // {
    //     for (auto it = myset.begin(); it != myset.end(); it++)
    //     {
    //         auto& [key, value] = *it;
    //         if (value == i)
    //             return key;
    //     }

    //     return "WOMP WOMP";
    // }

    unordered_map<std::string, int> getMap()
    {
        return myset;
    }
};

void print_vec(vector<int>& v)
{
    for (auto& e : v)
        cout << e << " ";
    cout << endl;
} 

class Graph
{
public:
    Graph()
    {
        graph_size = 0;
    }

    void print_stack(stack<int> stack)
    {
        while (!stack.empty())
        {
            cout << stack.top() << ", ";
            stack.pop();
        }
        cout << endl;
    }

    bool topologicalSort(vector<string>& vec_procs_in_deadlock, vector<int>& current_cycle)
    {
        // cout << "\nEntered topological sort" << endl; // debug

        // get all out-degree 0 nodes
        stack<int> stack_out_degree_0;  // stores the indices of out degree 0 nodes (index in vec_out_degree).

        // go through `vec_out_counts` and get nodes' indices with out degree of 0.
        for (u_int64_t i = 0; i < vec_out_counts.size(); i++)
        {
            if (vec_out_counts[i] == 0)
                stack_out_degree_0.push(i);
                // stack_out_degree_0.emplace(i);
        }

        // debug
        // print_out_counts();
        // cout << "nodes with out degree 0: " << endl;
        // print_stack(stack_out_degree_0);

        vector<int> copyVec_out_counts = vec_out_counts;
        int copy_size = graph_size;

        // debug
        // cout << "stack empty: " << stack_out_degree_0.empty() << endl;
        // cout << "stack size: " << stack_out_degree_0.size() << endl;
        
        vector<int> result;

        // keep removing nodes with out degree 0
        while (!stack_out_degree_0.empty())
        {
            int index_zero_node = stack_out_degree_0.top(); // get node with out-degree 0 to be `removed` from the graph
            stack_out_degree_0.pop();
            copy_size--;    // removed a node, decrement copied graph size
            
            result.push_back(index_zero_node);

            // if a node in the graph is pointing to node `index_zero_node` decrement the out-count for that node.
            for (u_int64_t i = 0; i < vec_adj_list.size(); i++)
            {
                // cout << "Checking adj list of <" << w2i.reverse_get(i) << ">" << endl;  // debug

                // go through the adj_list for this node
                for (auto it_adj_list_val = vec_adj_list[i].begin(); it_adj_list_val != vec_adj_list[i].end(); it_adj_list_val++)
                {
                    if (*it_adj_list_val == index_zero_node)
                    {
                        copyVec_out_counts[i]--;    // decrement out count for this node.

                        if (copyVec_out_counts[i] == 0)     // if this node has an out-degree of 0 
                            stack_out_degree_0.emplace(i);  // add it to the stack

                        // cout << "out degree of <" << w2i.reverse_get(i) << "> = " << copyVec_out_counts[i] << endl; // debug

                        break;
                    }
                }
            }
        }

        // check is there any node with an out-degree of 0, after the above removals.
        bool exist_node_with_out_degree_moreThan0 = false;

        for (auto it = copyVec_out_counts.begin(); it != copyVec_out_counts.end(); it++)
        {
            if (*it > 0)   // there exists a node in the graph where its out-degree is non zero
            {
                exist_node_with_out_degree_moreThan0 = true;
                break;
            }
        }

        // if the graph is not empty and there exists nodes with out-degrees > 0 then there is a dead lock (cycle).
        if (copy_size > 0 && exist_node_with_out_degree_moreThan0)
        {
            // get the processes that are part of the dead lock (ie nodes with out-degree > 0)
            // for (auto it = copyVec_out_counts.begin(); it != copyVec_out_counts.end(); it++)
            for (u_int64_t i = 0; i < copyVec_out_counts.size(); i++)
            {
                string node_name = w2i.reverse_get(i);
                if (copyVec_out_counts[i] > 0 && node_name[0] == processID)    // check if the out degree > 0 and if this node is a process
                {
                    vec_procs_in_deadlock.emplace_back(node_name); // remove the `processID` identifier at the beginning of the processes name
                }
            }

            // cout << "[topo sort] found deadlock" << endl;   // debug
            // contains dead locks
            return true;
        }

        // cout << "[topo sort] found NO deadlock" << endl;    // debug
        // if the graph is empty (size 0) then there is no deadlocks
        return false;
    }
   
    

    void addNode(const string& edge)
    {
        vector<string> edgeInfo = split(edge);

        // debug
        // cout << "\nedge entered:\n";
        // for (auto& e : edgeInfo)
        //     cout << e;
        // cout << endl;

        string process = processID + edgeInfo[0];
        string arrow = edgeInfo[1];
        string resource = resourceID + edgeInfo[2];

        // debug
        // cout << "\n--altered:\nProcess: " << process << endl;
        // cout << "Arrow: " << arrow << endl;
        // cout << "Resource: " << resource << endl;
        // note: processes will be on the left side of the `arrow` and resources
        // will be on the right side of the `arrow`.

        u_int32_t index_process = w2i.get(process);
        u_int32_t index_resource = w2i.get(resource);

        // debug
        // cout << "index for process: " << process << " = " << index_process << endl;
        // cout << "index for resource: " << resource << " = " << index_resource << endl;

        u_int32_t index_bigger = max(index_process, index_resource);
        if (index_bigger >= vec_out_counts.size())           // resize vector to bigger index
        {
            // cout << "Resizing vec_out... to size: " << index_bigger+1 << endl;  // debug
            vec_out_counts.resize(index_bigger + 1, 0);     // initialize all new indices with 0.
        }

        if (index_bigger >= vec_adj_list.size())            // resize vector to bigger index
        {
            // cout << "Resizing adj_list... to size: " << index_bigger+1 << endl;  // debug
            vec_adj_list.resize(index_bigger + 1, vector<int>());    // initialize all new indices with empty vectors.
        }

        // process requesting resource (P -> R)
        if (arrow == "->")
        {
            // // increment out degree of process
            // vec_out_counts[index_process]++;
            // // printf("vec_out[%d] = %d\n", index_process, vec_out_counts[index_process]); // debug

            // // add the resource to adj list of process
            // vector<int>& vec_adj_nodes = vec_adj_list[index_process];
            // // resize adj list if needed
            // index_bigger = max(index_process, index_resource);
            // if (index_bigger >= vec_adj_nodes.size())
            //     vec_adj_nodes.resize(index_bigger + 1, 0);
            // vec_adj_nodes[index_resource] = 1;      // set that the process is pointing to the resource 

            // increment out degree of process
            vec_out_counts[index_process]++;
            // printf("vec_out[%d] = %d\n", index_process, vec_out_counts[index_process]); // debug

            // add the resource to adj list of process
            vec_adj_list[index_process].emplace_back(index_resource);
        }
        // process receiving resource (P <- R)
        else
        {
            // // increment out degree of resource
            // vec_out_counts[index_resource]++;
            // // printf("vec_out[%d] = %d\n", index_resource, vec_out_counts[index_resource]); // debug

            // // add the process to adj list of resouce
            // vector<int>& vec_adj_nodes = vec_adj_list[index_resource];
            // // resize adj list if needed
            // index_bigger = max(index_process, index_resource);
            // if (index_bigger >= vec_adj_nodes.size())
            //     vec_adj_nodes.resize(index_bigger + 1, 0);
            // vec_adj_nodes[index_process] = 1;      // set that the resource is pointing to the process 

            // increment out degree of resource
            vec_out_counts[index_resource]++;
            // printf("vec_out[%d] = %d\n", index_resource, vec_out_counts[index_resource]); // debug

            vec_adj_list[index_resource].emplace_back(index_process);  // set that the resource is pointing to the process 
        }
        // debug
        // print_adj_list();
        // print_vec(vec_out_counts);  

        graph_size++;
    }

    // vector<vector<int>> get_adj_list()  // for debuging
    // {
    //     return vec_adj_list;
    // }

    // const vector<int>& get_out_counts()  // for debuging
    // {
    //     return vec_out_counts;
    // }


    // bool isEmpty()
    // {
    //     for (auto it = vec_out_counts.begin(); it != vec_out_counts.end(); it++)
    //     {
    //         if (*it != -1)      // if there is an index in 'vec_out_counts' that is not -1
    //             return false;   // then the graph is not empty.
    //     }
    //     return true;
    // }

    Word2Int get_w2i()
    {
        return w2i;
    }

    void print_out_counts()
    {
        printf("\nPrinting out counts size %d:\n", vec_out_counts.size());
        for (auto& c: vec_out_counts)
            cout << c << " ";
        cout << endl;
    }

    void print_adj_list()
    {
        printf("\nPrinting adj list:\n");
        for (auto i = 0; i < vec_adj_list.size(); i++)
        {
            // cout << "index " << i << ": ";
            cout << w2i.reverse_get(i) << "\t(index "<<i<<"): ";
            for (auto& edge : vec_adj_list[i])
                cout << edge << " ";
            cout << endl;
        }
    }

private:
    // unordered_map<string, vector<string>> adj_list;
    // unordered_map<string, int> out_counts;
    vector<vector<int>> vec_adj_list;   // outer vector contains the node to check, inner vector contains the list of node indices that `node to check` points to (outgoing edges)
    vector<int> vec_out_counts; // records the out degree's of nodes.
    Word2Int w2i;
    int graph_size;
};

/// this is the function you need to (re)implement
/// -------------------------------------------------------------------------
/// parameter edges[] contains a list of request- and assignment- edges
///   example of a request edge, process "p1" resource "r1"
///     "p1 -> r1"
///   example of an assignment edge, process "XYz" resource "XYz"
///     "XYz <- XYz"
///
/// You need to process edges[] one edge at a time, and run a deadlock
/// detection after each edge. As soon as you detect a deadlock, your function
/// needs to stop processing edges and return an instance of Result structure
/// with 'index' set to the index that caused the deadlock, and 'procs' set
/// to contain names of processes that are in the deadlock.
///
/// To indicate no deadlock was detected after processing all edges, you must
/// return Result with index=-1 and empty procs.
///
Result find_deadlock(const std::vector<std::string> & edges)
{
    Graph graph;
    Result result;
    result.index = -1;
    int count = 0;
    for (auto& edge : edges)
    {
        graph.addNode(edge);
        vector<string> proc;
        vector<int> current_cycle;
        cout << count << endl;
        if (graph.topologicalSort(proc, current_cycle))    // contains deadlock
        {
            cout << "Found a deadlock at index: " << count << endl;

            auto w2i = graph.get_w2i();
            // for each number in the current cycle, look for the matching value and return the following key
            for (auto & num : current_cycle)
            {
                string node_name = w2i.reverse_get(num);

                if (node_name[0] == processID)
                {
                    proc.push_back(node_name.substr(1));
                }

            }
    
            result.index = count;
            result.procs = proc;
            return result;
        }
        count++;
    }
    // vector<string> proc;
    // graph.topologicalSort(proc);// debug

    // graph.print_out();
    // graph.print_adj_list();

    result.index = -1;
    return result;

    // let's try to guess the results :)
    // result.procs = split(" 12 7  7 ");
    // result.index = 6;
    // return result;
}
