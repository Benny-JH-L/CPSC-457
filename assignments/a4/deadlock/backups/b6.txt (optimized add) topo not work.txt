/// =========================================================================
/// Copyright (C) 2025 Pavol Federl (pfederl@ucalgary.ca)
/// All Rights Reserved. Do not distribute this file.
/// =========================================================================
/// this is the ONLY file you should edit and submit to D2L

#include "find_deadlock.h"
#include <string>
#include <unordered_map>
#include <vector>
#include <iostream>
#include <cmath>
#include <unordered_set>
#include <queue>

using namespace std;

const char processID = '$';
const char resourceID = '#'; 

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// split(s) splits string s into vector of strings (words)
/// the delimiters are 1 or more whitespaces
static std::vector<std::string> split(const std::string & s)
{
    auto linec = s + " ";
    std::vector<std::string> res;
    bool in_str = false;
    std::string curr_word = "";
    for (auto c : linec) {
        if (isspace(c)) {
            if (in_str)
                res.push_back(curr_word);
            in_str = false;
            curr_word = "";
        } else {
            curr_word.push_back(c);
            in_str = true;
        }
    }
    return res;
}
// note i could make a small optimization on the above code by having a
// param as a vector, instead of returning one

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// Word2Int is a class that can convert words to unique integers
/// get(word) returns the same number given the same word
///           the numbers will start at 0, then 1, 2, ...
///
/// example:
///   Word2Int w2i;
///   w2i.get("hello") = 0
///   w2i.get("world") = 1
///   w2i.get("hello") = 0
///
/// Word2Int "may" help you get a bit more performance
/// in your cycle finding algorithm, as arrays are faster
/// than hash tables...
///

class Word2Int 
{
    int counter = 0;
    std::unordered_map<std::string, int> myset;
    std::unordered_map<int, string> reverse_myset;

public:
    int get(const std::string & w)
    {
        auto f = myset.find(w);
        if (f == myset.end()) {
            myset[w] = counter;
            reverse_myset[counter] = w;
            // return counter;
            return counter++;
        }
        reverse_myset[f->second] = f->first;
        return f->second;
    }

    string reverse_get(const int& i)
    {
        return reverse_myset[i];
    }

    // string reverse_get(const int& i)
    // {
    //     for (auto it = myset.begin(); it != myset.end(); it++)
    //     {
    //         auto& [key, value] = *it;
    //         if (value == i)
    //             return key;
    //     }

    //     return "WOMP WOMP";
    // }

    unordered_map<std::string, int> getMap()
    {
        return myset;
    }
};

void print_vec(vector<int>& v)
{
    for (auto& e : v)
        cout << e << " ";
    cout << endl;
} 

class Graph
{
public:
    Graph()
    {
        size = 0;
    }

    static int findDegree0Index(const vector<int>& out_vec)
    {
        for (u_int64_t i = 0; i < out_vec.size(); i++)
        {
            if (out_vec[i] == 0)
                return i;
        }

        return -1;  // there does not exist a node with an out degree of 0
    }

    // static bool topologicalSort(vector<vector<int>> adj_list, vector<int> out_counts)
    // bool topologicalSort()
    // {
    //     auto copy_vec_out_counts = vec_out_counts;
    //     auto copy_vec_adj_list = vec_adj_list;
    //     auto copy_size = size;

    //     while (true)
    //     {
    //         int index_0_out = findDegree0Index(copy_vec_out_counts);    // find index of a node with a degree of 0.
            
    //         // debug
    //         // cout << "index w/ 0: " << index_0_out << endl;
    //         // cout << "Size = " << copy_size << endl;

    //         if (index_0_out == -1 && copy_size > 0)  // found no node with degree of 0.
    //             return true;        // contains deadlock
    //         else if (index_0_out == -1 && copy_size <= 0)
    //             return false;       // no deadlock
            
    //         for (u_int64_t i = 0; i < copy_vec_adj_list.size(); i++)
    //         {
    //             // Skip this node (adj_list[i]) as its adj list is too small (ie node is not pointing to `index_0_out`)
    //             if (index_0_out >= copy_vec_adj_list[i].size())
    //                 continue;
    //             copy_vec_adj_list[i][index_0_out] = 0; // set adj_list[i][index_0_out] to 0 for no connection from node [i] to [index_0_out]
    //             copy_vec_out_counts[i]--;               // degrement out degree of the node that pointed to node at `index_0_out`
    //         }
    
    //         copy_vec_out_counts[index_0_out] = -1;    // set to -1 for removed node
    //         copy_size--;   // decrement graph size
    //     }        

    //     return false;
    // }

    // finds a dead lock in test1.txt when there isnt supposed to be one..
    // bool topologicalSort(Result& result)
    // {
    //     auto copy_vec_out_counts = vec_out_counts;
    //     auto copy_vec_adj_list = vec_adj_list;
    //     auto copy_size = size;
    //     unordered_set<int> remaining_nodes;
    
    //     for (size_t i = 0; i < copy_vec_out_counts.size(); i++)
    //     {
    //         if (copy_vec_out_counts[i] >= 0)
    //             remaining_nodes.insert(i);
    //     }
    
    //     while (true)
    //     {
    //         int index_0_out = findDegree0Index(copy_vec_out_counts);
    
    //         if (index_0_out == -1 && copy_size > 0)  // Deadlock detected
    //         {
    //             result.procs.clear();
    //             result.index = -1;
    
    //             // Collect only process names (those ending with `processID`)
    //             for (int node : remaining_nodes)
    //             {
    //                 // string name = w2i.get(node); // Reverse lookup from Word2Int
    //                 string name = w2i.reverse_get(node); // Reverse lookup from Word2Int
    //                 if (name.back() == processID[0]) // Check if it's a process
    //                     result.procs.push_back(name.substr(0, name.size() - 1)); // Remove '$'
    //             }
    
    //             return true; // Deadlock detected
    //         }
    //         else if (index_0_out == -1 && copy_size <= 0)
    //             return false; // No deadlock
            
    //         // Remove node from the graph
    //         remaining_nodes.erase(index_0_out);
    //         cout << "HI: " << index_0_out <<" "<< copy_size << endl;
    //         for (size_t i = 0; i < copy_vec_adj_list.size(); i++)
    //         {
    //             if (index_0_out >= copy_vec_adj_list[i].size()) 
    //                 continue;
    //             copy_vec_adj_list[i][index_0_out] = 0;
    //             // copy_vec_out_counts[i] = max(copy_vec_out_counts[i] - 1, 0);
    //             copy_vec_out_counts[i]--;
    //         }
    
    //         copy_vec_out_counts[index_0_out] = -1;
    //         copy_size--;
    //     }
    
    //     return false;
    // }    

    // Does not finish for test6.txt (too slow bc of 2D array copying, i assume)
    // bool topologicalSort(vector<string>& procs_in_deadlock)
    // {
    //     auto copy_vec_out_counts = vec_out_counts;
    //     auto copy_vec_adj_list = vec_adj_list;      // to optimize, i don't need to copy this, onlt the vec outs. and i don;t need to edut the adj list at all.
    //     auto copy_size = size;
        
    //     queue<int> queue_zero_out_degree_nodes;
    //     std::unordered_set<int> remaining_nodes; // Track nodes still present after sorting
    
    //     // Initialize the queue with nodes having out-degree 0
    //     for (size_t i = 0; i < copy_vec_out_counts.size(); i++) 
    //     {
    //         if (copy_vec_out_counts[i] == 0)
    //             queue_zero_out_degree_nodes.push(i);
    //         else
    //             remaining_nodes.insert(i); // Assume it's in cycle until removed
    //     }
    
    //     while (!queue_zero_out_degree_nodes.empty())
    //     {
    //         int indexOf0DegreeNode = queue_zero_out_degree_nodes.front();
    //         queue_zero_out_degree_nodes.pop();
    //         remaining_nodes.erase(indexOf0DegreeNode); // Remove from cycle set since it's processed
    //         copy_size--;
    
    //         // Remove edges pointing to this node
    //         for (size_t i = 0; i < copy_vec_adj_list.size(); i++)
    //         {
    //             if (i == indexOf0DegreeNode)
    //                 continue;  // skip itself
    //             if (copy_vec_adj_list[i].size() > indexOf0DegreeNode && copy_vec_adj_list[i][indexOf0DegreeNode] == 1)
    //             {
    //                 copy_vec_adj_list[i][indexOf0DegreeNode] = 0; // Remove edge
    //                 copy_vec_out_counts[i]--;
    
    //                 if (copy_vec_out_counts[i] == 0)
    //                     queue_zero_out_degree_nodes.push(i);
    //             }
    //         }
    //     }
    
    //     // If there are remaining nodes, a cycle (deadlock) exists
    //     if (copy_size > 0)
    //     {
    //         cout << "Copy size: " << copy_size << endl;
    //         for (int node : remaining_nodes)
    //         {
    //             // Convert node index back to process name
    //             // for (const auto& pair : w2i.getMap())
    //             // {
    //             //     if (pair.second == node && pair.first.back() == processID[0]) // Only process IDs
    //             //     {
    //             //         procs_in_deadlock.push_back(pair.first.substr(0, pair.first.size() - 1)); // Remove "$"
    //             //     }
    //             // }
    //             string name = w2i.reverse_get(node);
    //             if (name.back() != processID[0])
    //                 continue;
    //             procs_in_deadlock.push_back(name.substr(0, name.size() - 1)); // Remove "$"
    //         }
    //         return true;
    //     }
    
    //     return false;
    // }

    // still slow
    bool topologicalSort(vector<string>& procs_in_deadlock)
    {
        auto copy_vec_out_counts = vec_out_counts;
        auto copy_size = size;
        
        queue<int> queue_zero_out_degree_nodes;
        std::unordered_set<int> remaining_nodes; // Track nodes still present after sorting
    
        // Initialize the queue with nodes having out-degree 0
        for (size_t i = 0; i < copy_vec_out_counts.size(); i++) 
        {
            if (copy_vec_out_counts[i] == 0)
                queue_zero_out_degree_nodes.push(i);
            else
                remaining_nodes.insert(i); // Assume it's in cycle until removed
        }
    
        while (!queue_zero_out_degree_nodes.empty())
        {
            int indexOf0DegreeNode = queue_zero_out_degree_nodes.front();
            queue_zero_out_degree_nodes.pop();
            remaining_nodes.erase(indexOf0DegreeNode); // Remove from cycle set since it's processed
            copy_size--;
    
            // Remove edges pointing to this node
            for (size_t i = 0; i < vec_adj_list.size(); i++)
            {
                if (i == indexOf0DegreeNode)
                    continue;  // skip itself
                if (vec_adj_list[i].size() > indexOf0DegreeNode && vec_adj_list[i][indexOf0DegreeNode] == 1)
                {
                    copy_vec_out_counts[i]--;
    
                    if (copy_vec_out_counts[i] == 0)
                        queue_zero_out_degree_nodes.push(i);
                }
            }
        }
    
        // If there are remaining nodes, a cycle (deadlock) exists
        if (copy_size > 0)
        {
            cout << "Copy size: " << copy_size << endl;
            for (int node : remaining_nodes)
            {
                // Convert node index back to process name
                // for (const auto& pair : w2i.getMap())
                // {
                //     if (pair.second == node && pair.first.back() == processID[0]) // Only process IDs
                //     {
                //         procs_in_deadlock.push_back(pair.first.substr(0, pair.first.size() - 1)); // Remove "$"
                //     }
                // }
                string name = w2i.reverse_get(node);
                if (name.back() != processID)
                    continue;
                procs_in_deadlock.push_back(name.substr(0, name.size() - 1)); // Remove "$"
            }
            return true;
        }
    
        return false;
    }
   

    

    // NOT WORKING
    // bool topologicalSort(vector<string>& procs_in_deadlock)
    // {
    //     auto copy_vec_out_counts = vec_out_counts;
    //     auto copy_size = size;

    //     unordered_set<int> remaining_nodes; // Track nodes still present after sorting
    
    //     int indexOf0DegreeNode = findDegree0Index(vec_out_counts);
    //     while (indexOf0DegreeNode != -1)
    //     {
    //         cout << "index of 0 out: " << indexOf0DegreeNode << endl;
    //         remaining_nodes.erase(indexOf0DegreeNode); // Remove from cycle set since it's processed
    //         copy_size--;
    
    //         // Remove edges pointing to this node
    //         for (size_t i = 0; i < vec_adj_list.size(); i++)
    //         {
    //             if (i == indexOf0DegreeNode)
    //                 continue;  // skip itself
    //             if (vec_adj_list[i].size() > indexOf0DegreeNode && vec_adj_list[i][indexOf0DegreeNode] == 1)
    //             {
    //                 copy_vec_out_counts[i]--;
    
    //             }
    //         }
    //         vec_out_counts[indexOf0DegreeNode] = -1;
    //         indexOf0DegreeNode = findDegree0Index(vec_out_counts);
    //     }
    
    //     // If there are remaining nodes, a cycle (deadlock) exists
    //     if (copy_size > 0)
    //     {
    //         cout << "Copy size: " << copy_size << endl;
    //         for (int node : remaining_nodes)
    //         {
    //             string name = w2i.reverse_get(node);
    //             if (name.back() != processID[0])
    //                 continue;
    //             procs_in_deadlock.push_back(name.substr(0, name.size() - 1)); // Remove "$"
    //         }
    //         return true;
    //     }
    
    //     return false;
    // }
   
    

    void addNode(const string& edge)
    {
        vector<string> edgeInfo = split(edge);

        // debug
        // cout << "\nedge entered:\n";
        // for (auto& e : edgeInfo)
        //     cout << e;
        // cout << endl;

        string process = processID + edgeInfo[0];
        string arrow = edgeInfo[1];
        string resource = resourceID + edgeInfo[2];

        // debug
        // cout << "\n--altered:\nProcess: " << process << endl;
        // cout << "Arrow: " << arrow << endl;
        // cout << "Resource: " << resource << endl;
        // note: processes will be on the left side of the `arrow` and resources
        // will be on the right side of the `arrow`.

        u_int32_t index_process = w2i.get(process);
        u_int32_t index_resource = w2i.get(resource);

        // debug
        // cout << "index for process: " << process << " = " << index_process << endl;
        // cout << "index for resource: " << resource << " = " << index_resource << endl;

        u_int32_t index_bigger = max(index_process, index_resource);
        if (index_bigger >= vec_out_counts.size())           // resize vector to bigger index
        {
            // cout << "Resizing vec_out... to size: " << index_bigger+1 << endl;  // debug
            vec_out_counts.resize(index_bigger + 1, 0);     // initialize all new indices with 0.
        }

        if (index_bigger >= vec_adj_list.size())            // resize vector to bigger index
        {
            // cout << "Resizing adj_list... to size: " << index_bigger+1 << endl;  // debug
            vec_adj_list.resize(index_bigger + 1, vector<int>());    // initialize all new indices with empty vectors.
        }

        // process requesting resource (P -> R)
        if (arrow == "->")
        {
            // // increment out degree of process
            // vec_out_counts[index_process]++;
            // // printf("vec_out[%d] = %d\n", index_process, vec_out_counts[index_process]); // debug

            // // add the resource to adj list of process
            // vector<int>& vec_adj_nodes = vec_adj_list[index_process];
            // // resize adj list if needed
            // index_bigger = max(index_process, index_resource);
            // if (index_bigger >= vec_adj_nodes.size())
            //     vec_adj_nodes.resize(index_bigger + 1, 0);
            // vec_adj_nodes[index_resource] = 1;      // set that the process is pointing to the resource 

            // increment out degree of process
            vec_out_counts[index_process]++;
            // printf("vec_out[%d] = %d\n", index_process, vec_out_counts[index_process]); // debug

            // add the resource to adj list of process
            vec_adj_list[index_process].emplace_back(index_resource);
        }
        // process receiving resource (P <- R)
        else
        {
            // // increment out degree of resource
            // vec_out_counts[index_resource]++;
            // // printf("vec_out[%d] = %d\n", index_resource, vec_out_counts[index_resource]); // debug

            // // add the process to adj list of resouce
            // vector<int>& vec_adj_nodes = vec_adj_list[index_resource];
            // // resize adj list if needed
            // index_bigger = max(index_process, index_resource);
            // if (index_bigger >= vec_adj_nodes.size())
            //     vec_adj_nodes.resize(index_bigger + 1, 0);
            // vec_adj_nodes[index_process] = 1;      // set that the resource is pointing to the process 

            // increment out degree of resource
            vec_out_counts[index_resource]++;
            // printf("vec_out[%d] = %d\n", index_resource, vec_out_counts[index_resource]); // debug

            vec_adj_list[index_resource].emplace_back(index_process);  // set that the resource is pointing to the process 
        }
        // debug
        print_vec(vec_out_counts);  
        print_adj_list();
        size++;
    }

    // vector<vector<int>> get_adj_list()  // for debuging
    // {
    //     return vec_adj_list;
    // }

    // const vector<int>& get_out_counts()  // for debuging
    // {
    //     return vec_out_counts;
    // }


    // bool isEmpty()
    // {
    //     for (auto it = vec_out_counts.begin(); it != vec_out_counts.end(); it++)
    //     {
    //         if (*it != -1)      // if there is an index in 'vec_out_counts' that is not -1
    //             return false;   // then the graph is not empty.
    //     }
    //     return true;
    // }

    void print_out()
    {
        printf("\nPrinting out counts size %d:\n", vec_out_counts.size());
        for (auto& c: vec_out_counts)
            cout << c << " ";
        cout << endl;
    }

    void print_adj_list()
    {
        printf("\nPrinting adj list:\n");
        for (auto i = 0; i < vec_adj_list.size(); i++)
        {
            // cout << "index " << i << ": ";
            cout << w2i.reverse_get(i) << "\t(index "<<i<<"): ";
            for (auto& edge : vec_adj_list[i])
                cout << edge << " ";
            cout << endl;
        }
    }

private:
    // unordered_map<string, vector<string>> adj_list;
    // unordered_map<string, int> out_counts;
    vector<vector<int>> vec_adj_list;   // outer vector contains the node to check, inner vector contains the list of node indices that `node to check` points to (outgoing edges)
    vector<int> vec_out_counts; // records the out degree's of nodes.
    Word2Int w2i;
    int size;
};

/// this is the function you need to (re)implement
/// -------------------------------------------------------------------------
/// parameter edges[] contains a list of request- and assignment- edges
///   example of a request edge, process "p1" resource "r1"
///     "p1 -> r1"
///   example of an assignment edge, process "XYz" resource "XYz"
///     "XYz <- XYz"
///
/// You need to process edges[] one edge at a time, and run a deadlock
/// detection after each edge. As soon as you detect a deadlock, your function
/// needs to stop processing edges and return an instance of Result structure
/// with 'index' set to the index that caused the deadlock, and 'procs' set
/// to contain names of processes that are in the deadlock.
///
/// To indicate no deadlock was detected after processing all edges, you must
/// return Result with index=-1 and empty procs.
///
Result find_deadlock(const std::vector<std::string> & edges)
{
    Graph graph;
    Result result;
    result.index = -1;
    int count = 0;
    for (auto& edge : edges)
    {
        graph.addNode(edge);
        vector<string> proc;

        // if (graph.topologicalSort(result))    // contains deadlock
        // if (graph.topologicalSort(proc))    // contains deadlock
        // {
        //     cout << "Found a deadlock at index: " << count << endl;

        //     result.index = count;
        //     result.procs = proc;
        //     return result;

        //     result.index = count;

        //     // graph.print_out();
        //     // graph.print_adj_list();

        //     return result;
        // }
        count++;
    }

    // graph.print_out();
    // graph.print_adj_list();

    result.index = -1;
    return result;

    // let's try to guess the results :)
    // result.procs = split(" 12 7  7 ");
    // result.index = 6;
    // return result;
}
