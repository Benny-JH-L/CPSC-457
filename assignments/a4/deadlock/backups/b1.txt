/// =========================================================================
/// Copyright (C) 2025 Pavol Federl (pfederl@ucalgary.ca)
/// All Rights Reserved. Do not distribute this file.
/// =========================================================================
/// this is the ONLY file you should edit and submit to D2L

#include "find_deadlock.h"
#include <string>
#include <unordered_map>
#include <vector>
#include <iostream>
#include <cmath>

using namespace std;

const string processID = "$";
const string resourceID = "#"; 

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// split(s) splits string s into vector of strings (words)
/// the delimiters are 1 or more whitespaces
static std::vector<std::string> split(const std::string & s)
{
    auto linec = s + " ";
    std::vector<std::string> res;
    bool in_str = false;
    std::string curr_word = "";
    for (auto c : linec) {
        if (isspace(c)) {
            if (in_str)
                res.push_back(curr_word);
            in_str = false;
            curr_word = "";
        } else {
            curr_word.push_back(c);
            in_str = true;
        }
    }
    return res;
}
// note i could make a small optimization on the above code by having a
// param as a vector, instead of returning one

/// feel free to use the code below if you like:
/// ----------------------------------------------------------------
/// Word2Int is a class that can convert words to unique integers
/// get(word) returns the same number given the same word
///           the numbers will start at 0, then 1, 2, ...
///
/// example:
///   Word2Int w2i;
///   w2i.get("hello") = 0
///   w2i.get("world") = 1
///   w2i.get("hello") = 0
///
/// Word2Int "may" help you get a bit more performance
/// in your cycle finding algorithm, as arrays are faster
/// than hash tables...
///

class Word2Int 
{
    int counter = 0;
    std::unordered_map<std::string, int> myset;

public:
    int get(const std::string & w)
    {
        auto f = myset.find(w);
        if (f == myset.end()) {
            myset[w] = counter;
            return counter++;
        }
        return f->second;
    }
};

void print_vec(vector<int>& v)
{
    for (auto& e : v)
        cout << e << " ";
    cout << endl;
} 

class Graph
{
public:
    Graph()
    {}

    void addNode(const string& edge)
    {
        vector<string> edgeInfo = split(edge);

        cout << "\nedge entered:\n";
        for (auto& e : edgeInfo)
            cout << e;
        cout << endl;

        string process = edgeInfo[0] + processID;
        string arrow = edgeInfo[1];
        string resource = edgeInfo[2] + resourceID;

        // debug
        cout << "\n--altered:\nProcess: " << process << endl;
        cout << "Arrow: " << arrow << endl;
        cout << "Resource: " << resource << endl;
        // note: processes will be on the left side of the `arrow` and resources
        // will be on the right side of the `arrow`.

        u_int32_t index_process = w2i.get(process);
        u_int32_t index_resource = w2i.get(resource);

        // debug
        cout << "index for process: " << process << " = " << index_process << endl;
        cout << "index for resource: " << resource << " = " << index_resource << endl;

        u_int32_t index_bigger = max(index_process, index_resource);
        if (index_bigger >= vec_out_counts.size())           // resize vector for bigger index
        {
            cout << "Resizing... to size: " << index_bigger+1 << endl;
            vec_out_counts.resize(index_bigger + 1, 0);     // initialize all new indices with 0.
            print_vec(vec_out_counts);
        }

        // process requesting resource (P -> R)
        if (arrow == "->")
        {
            // increment out degree of process
            // if (index_process > vec_out_counts.size())  // resize vector for new process
            //     vec_out_counts.resize(index_process, 0); // initialize all new indicies with a 0.
            vec_out_counts[index_process]++;
            printf("vec_out[%d] = %d\n", index_process, vec_out_counts[index_process]);
        }
        // process receiving resource (P <- R)
        else
        {
            // increment out degree of resource
            // if (index_resource > vec_out_counts.size())  // resize vector for new process
            //     vec_out_counts.resize(index_resource, 0); // initialize all new indicies with a 0.
            vec_out_counts[index_resource]++;
            printf("vec_out[%d] = %d\n", index_resource, vec_out_counts[index_resource]);
        }
        print_vec(vec_out_counts);
    }

    vector<vector<int>> get_adj_list()  // for debuging
    {
        return vec_adj_list;
    }

    const vector<int>& get_out_counts()  // for debuging
    {
        return vec_out_counts;
    }

    void print_out()
    {
        printf("\nPrinting out counts size %d:\n", vec_out_counts.size());
        for (auto& c: vec_out_counts)
            cout << c << " ";
        cout << endl;
    }

private:
    // unordered_map<string, vector<string>> adj_list;
    // unordered_map<string, int> out_counts;
    vector<vector<int>> vec_adj_list;   // outer vector contains the node to check, inner vector contains the list of nodes that node to check points to (outgoing edges)
    vector<int> vec_out_counts; // records the out degree's of nodes.
    Word2Int w2i;
};

/// this is the function you need to (re)implement
/// -------------------------------------------------------------------------
/// parameter edges[] contains a list of request- and assignment- edges
///   example of a request edge, process "p1" resource "r1"
///     "p1 -> r1"
///   example of an assignment edge, process "XYz" resource "XYz"
///     "XYz <- XYz"
///
/// You need to process edges[] one edge at a time, and run a deadlock
/// detection after each edge. As soon as you detect a deadlock, your function
/// needs to stop processing edges and return an instance of Result structure
/// with 'index' set to the index that caused the deadlock, and 'procs' set
/// to contain names of processes that are in the deadlock.
///
/// To indicate no deadlock was detected after processing all edges, you must
/// return Result with index=-1 and empty procs.
///
Result find_deadlock(const std::vector<std::string> & edges)
{
    Graph graph;
    for (auto& edge : edges)
        graph.addNode(edge);

    printf("Printing adj list:\n");
    auto vec_adj_list = graph.get_adj_list();
    for (auto i = 0; i < vec_adj_list.size(); i++)
    {
        for (auto& edge : vec_adj_list[i])
            cout << edge;
        cout << endl;
    }

    // printf("\nPrinting out counts:\n");
    // auto vec_outs = graph.get_out_counts();
    // for (auto& c: vec_outs)
    //     cout << c << " ";
    // cout << endl;
    graph.print_out();

    // let's try to guess the results :)
    Result result;
    result.procs = split(" 12 7  7 ");
    result.index = 6;
    return result;
}
