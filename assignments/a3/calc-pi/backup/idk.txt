// ======================================================================
// You must modify this file and then submit it for grading to D2L.
// ======================================================================
//
// count_pixels() counts the number of pixels that fall into a circle
// using the algorithm explained here:
//
// https://en.wikipedia.org/wiki/Approximations_of_%CF%80
//
// count_pixels() takes 2 paramters:
//  r         =  the radius of the circle
//  n_threads =  the number of threads you should create
//
// Currently the function ignores the n_threads parameter. Your job is to
// parallelize the function so that it uses n_threads threads to do
// the computation.

#include "calcpi.h"
#include <cstdio>
#include <iostream>

using namespace std;

struct Task {
    double start_x;
    double end_x;
    uint64_t partial_count;
};

uint64_t count_pixels(int r, int n_threads)
{
    // Task tasks[n_threads];
    // double segment = double(r) / n_threads;
    // double tmpR = r;
    // for (int i = 0, x = -r; i < n_threads; i++)
    // {
    //     tasks[i].start_x = x;
    //     x = x + segment;
    //     tasks[i].end_x = x + segment;
    // }????????????????

    // // split the radius evenly amoung n-threads
    // some threads 


    // make sure your multithreaded solution returns the same number of
    // pixels as the single-threaded solution below!!!
    double rsq = double(r) * r;
    uint64_t count = 0;
    for (double x = -r; x <= r; x++) 
    {
        printf("\n--x = %f\n", x);
        for (double y = -r; y <= r; y++) 
        {
            if (x * x + y * y <= rsq) 
            {
                count++;
                printf("count = %ld\n", count);
        }
            printf("y = %f\n", y);
        }
    }
    // printf("final count: %f", count);
    cout << "Final count: " << count << endl;
    return count;
}

// need to make n threads, then make them count_pixels with evenly distributed radi
// then, sum up all the partials counts at the end
 


// uint64_t count_pixels(int r, int n_threads)
// {
//     // make sure your multithreaded solution returns the same number of
//     // pixels as the single-threaded solution below!!!
//     double rsq = double(r) * r;
//     uint64_t count = 0;
//     for (double x = -r; x <= r; x++) {
//         for (double y = -r; y <= r; y++) {
//             if (x * x + y * y <= rsq) {
//                 count++;
//             }
//         }
//     }
//     return count;
// }
